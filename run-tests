#!/bin/bash

set -e

# Set number of processes and threads ------------------------------------------

NUM_PROCESSES=1
NUM_THREADS=4

# Set executable and cross section ---------------------------------------------

EXE=$(pwd)/openmc/build/bin/openmc
export CROSS_SECTIONS=$(pwd)/openmc/data/nndc/cross_sections.xml

# Run tests --------------------------------------------------------------------

# The -n argument to OpenMC gives the number of particles. Here we scale it so
# that no matter how many MPI processes and OpenMP threads are used, the work
# per thread is always the same. The -s argument specifies the number of
# threads.

echo Running small H-M test without tallies
cd small-notallies
PARTICLES=$(expr $NUM_PROCESSES \* $NUM_THREADS \* 4000)
mpiexec -n $NUM_PROCESSES $EXE -n $PARTICLES -s $NUM_THREADS > stdout 2>&1
cd ..

echo Running small H-M test with tallies
cd small-tallies
PARTICLES=$(expr $NUM_PROCESSES \* $NUM_THREADS \* 2000)
mpiexec -n $NUM_PROCESSES $EXE -n $PARTICLES  -s $NUM_THREADS > stdout 2>&1
cd ..

echo Running large H-M test without tallies
cd large-notallies
PARTICLES=$(expr $NUM_PROCESSES \* $NUM_THREADS \* 400)
mpiexec -n $NUM_PROCESSES $EXE -n $PARTICLES -s $NUM_THREADS > stdout 2>&1
cd ..

echo Running large H-M test with tallies
cd large-tallies
PARTICLES=$(expr $NUM_PROCESSES \* $NUM_THREADS \* 200)
mpiexec -n $NUM_PROCESSES $EXE -n $PARTICLES -s $NUM_THREADS > stdout 2>&1
cd ..
